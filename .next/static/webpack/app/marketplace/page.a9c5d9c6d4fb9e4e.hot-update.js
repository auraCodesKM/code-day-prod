"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/marketplace/page",{

/***/ "(app-pages-browser)/./components/NFTService.ts":
/*!**********************************!*\
  !*** ./components/NFTService.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NFTService: function() { return /* binding */ NFTService; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _config_contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/contracts */ \"(app-pages-browser)/./config/contracts.ts\");\n\n\n// NFT Contract ABI - This should match your deployed contract\nconst NFT_ABI = [\n    \"function mintShip1() external payable returns (uint256)\",\n    \"function mintShip2() external payable returns (uint256)\",\n    \"function mintShip3() external payable returns (uint256)\",\n    \"function mintShip(string memory tokenURI) external payable returns (uint256)\",\n    \"function tokenCounter() external view returns (uint256)\",\n    \"function mintFee() external view returns (uint256)\",\n    \"function ownerOf(uint256 tokenId) external view returns (address)\",\n    \"function tokenURI(uint256 tokenId) external view returns (string)\",\n    \"function balanceOf(address owner) external view returns (uint256)\",\n    \"function burn(uint256 tokenId) external\",\n    \"event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)\"\n];\nclass NFTService {\n    async mintNFT(rocket) {\n        if (!this.contract || !this.signer) {\n            return {\n                success: false,\n                error: \"Wallet not connected\"\n            };\n        }\n        try {\n            // Determine which mint function to use based on rocket ID with static fees\n            let mintFunction;\n            let mintFee;\n            switch(rocket.id){\n                case 1:\n                    mintFunction = \"mintShip1\";\n                    mintFee = ethers__WEBPACK_IMPORTED_MODULE_1__.parseEther(\"0.01\") // 0.01 ETH\n                    ;\n                    break;\n                case 2:\n                    mintFunction = \"mintShip2\";\n                    mintFee = ethers__WEBPACK_IMPORTED_MODULE_1__.parseEther(\"0.025\") // 0.025 ETH\n                    ;\n                    break;\n                case 3:\n                    mintFunction = \"mintShip3\";\n                    mintFee = ethers__WEBPACK_IMPORTED_MODULE_1__.parseEther(\"0.05\") // 0.05 ETH\n                    ;\n                    break;\n                default:\n                    return {\n                        success: false,\n                        error: \"Invalid rocket ID\"\n                    };\n            }\n            // Mint the NFT using the appropriate function (no tokenURI needed as it's hardcoded)\n            const tx = await this.contract[mintFunction]({\n                value: mintFee\n            });\n            // Wait for transaction confirmation\n            const receipt = await tx.wait();\n            // Find the Transfer event to get the token ID\n            const transferEvent = receipt.logs.find((log)=>{\n                try {\n                    const parsed = this.contract.interface.parseLog(log);\n                    return (parsed === null || parsed === void 0 ? void 0 : parsed.name) === \"Transfer\";\n                } catch (e) {\n                    return false;\n                }\n            });\n            if (transferEvent) {\n                const parsed = this.contract.interface.parseLog(transferEvent);\n                if (parsed) {\n                    const tokenId = parsed.args[2] // tokenId is the third argument\n                    ;\n                    return {\n                        success: true,\n                        tokenId: Number(tokenId)\n                    };\n                }\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Mint error:\", error);\n            return {\n                success: false,\n                error: error.reason || error.message || \"Failed to mint NFT\"\n            };\n        }\n    }\n    async getMintFee(shipId) {\n        if (!this.contract) {\n            return \"0.01\" // Default fallback\n            ;\n        }\n        try {\n            const fee = await this.contract.mintFee();\n            return ethers__WEBPACK_IMPORTED_MODULE_1__.formatEther(fee);\n        } catch (error) {\n            console.error(\"Error getting mint fee:\", error);\n            return \"0.01\" // Default fallback\n            ;\n        }\n    }\n    async getTokenCounter() {\n        if (!this.contract) {\n            return 0;\n        }\n        try {\n            const counter = await this.contract.tokenCounter();\n            return Number(counter);\n        } catch (error) {\n            console.error(\"Error getting token counter:\", error);\n            return 0;\n        }\n    }\n    async getUserNFTs(address) {\n        if (!this.contract) {\n            return [];\n        }\n        try {\n            const balance = await this.contract.balanceOf(address);\n            const tokenIds = [];\n            // Get all tokens owned by the user\n            for(let i = 0; i < Number(balance); i++){\n                // This is a simplified approach - in production you might want to use events\n                // or maintain a mapping of user tokens\n                const tokenId = await this.contract.tokenOfOwnerByIndex(address, i);\n                tokenIds.push(Number(tokenId));\n            }\n            return tokenIds;\n        } catch (error) {\n            console.error(\"Error getting user NFTs:\", error);\n            return [];\n        }\n    }\n    createTokenURI(rocket) {\n        // Create metadata for the NFT\n        const metadata = {\n            name: rocket.name,\n            description: rocket.description,\n            image: rocket.image,\n            attributes: [\n                {\n                    trait_type: \"Rarity\",\n                    value: rocket.rarity\n                },\n                {\n                    trait_type: \"Speed\",\n                    value: rocket.stats.speed,\n                    max_value: 100\n                },\n                {\n                    trait_type: \"Armor\",\n                    value: rocket.stats.armor,\n                    max_value: 100\n                },\n                {\n                    trait_type: \"Luck\",\n                    value: rocket.stats.luck,\n                    max_value: 100\n                }\n            ],\n            external_url: \"https://burnorglory.com\",\n            background_color: \"000000\"\n        };\n        // In a real implementation, you would upload this to IPFS or similar\n        // For now, we'll return a data URI\n        const jsonString = JSON.stringify(metadata);\n        return \"data:application/json;base64,\".concat(btoa(jsonString));\n    }\n    // Helper method to format address for display\n    static formatAddress(address) {\n        return \"\".concat(address.slice(0, 6), \"...\").concat(address.slice(-4));\n    }\n    // Helper method to check if address is valid\n    static isValidAddress(address) {\n        return ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(address);\n    }\n    constructor(signer, chainId){\n        this.contract = null;\n        this.signer = null;\n        this.chainId = null;\n        this.signer = signer;\n        this.chainId = chainId || null;\n        if (signer) {\n            const contractAddress = (0,_config_contracts__WEBPACK_IMPORTED_MODULE_0__.getContractAddress)(chainId || 1);\n            this.contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.Contract(contractAddress, NFT_ABI, signer);\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/NFTService.ts\n"));

/***/ })

});