"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/fleet/page",{

/***/ "(app-pages-browser)/./components/AlchemyService.tsx":
/*!***************************************!*\
  !*** ./components/AlchemyService.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlchemyNFTService: function() { return /* binding */ AlchemyNFTService; },\n/* harmony export */   SHIP_TYPES: function() { return /* binding */ SHIP_TYPES; },\n/* harmony export */   alchemyNFTService: function() { return /* binding */ alchemyNFTService; }\n/* harmony export */ });\n/* harmony import */ var alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alchemy-sdk */ \"(app-pages-browser)/./node_modules/alchemy-sdk/dist/esm/index-f73a5f29.js\");\n/* __next_internal_client_entry_do_not_use__ SHIP_TYPES,AlchemyNFTService,alchemyNFTService auto */ \n// Alchemy configuration - support multiple networks\nconst getAlchemyConfig = ()=>{\n    const apiKey = \"mKSXhkHH4QGGKApSV9bmVUoFwuetHWWw\" || 0;\n    const chainId = \"11155111\" || 0;\n    // Map chain IDs to Alchemy networks\n    const networkMap = {\n        \"1\": alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.ETH_MAINNET,\n        \"11155111\": alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.ETH_SEPOLIA,\n        \"137\": alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.MATIC_MAINNET,\n        \"80001\": alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.MATIC_MUMBAI\n    };\n    const network = networkMap[chainId] || alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.ETH_SEPOLIA;\n    console.log(\"Alchemy Config:\", {\n        apiKey: apiKey.substring(0, 10) + \"...\",\n        network,\n        chainId\n    });\n    return {\n        apiKey,\n        network\n    };\n};\nconst alchemy = new alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.m(getAlchemyConfig());\n// NFT Ship Types mapping\nconst SHIP_TYPES = {\n    \"STELLAR VOYAGER\": {\n        id: \"stellar-voyager\",\n        name: \"STELLAR VOYAGER\",\n        rarity: \"COMMON\",\n        color: \"neon-blue\",\n        stats: {\n            speed: 65,\n            armor: 45,\n            luck: 30\n        },\n        description: \"A reliable starter ship for cosmic adventures\"\n    },\n    \"NEBULA HUNTER\": {\n        id: \"nebula-hunter\",\n        name: \"NEBULA HUNTER\",\n        rarity: \"RARE\",\n        color: \"neon-green\",\n        stats: {\n            speed: 80,\n            armor: 60,\n            luck: 35\n        },\n        description: \"Enhanced propulsion for deep space missions\"\n    },\n    \"QUANTUM DESTROYER\": {\n        id: \"quantum-destroyer\",\n        name: \"QUANTUM DESTROYER\",\n        rarity: \"EPIC\",\n        color: \"neon-purple\",\n        stats: {\n            speed: 95,\n            armor: 85,\n            luck: 75\n        },\n        description: \"Elite warship with quantum-enhanced capabilities\"\n    }\n};\n// Map NFT metadata to ship type based on name or attributes\nconst mapNFTToShipType = (nft)=>{\n    var _nft_name, _nft_description;\n    const name = ((_nft_name = nft.name) === null || _nft_name === void 0 ? void 0 : _nft_name.toUpperCase()) || \"\";\n    const description = ((_nft_description = nft.description) === null || _nft_description === void 0 ? void 0 : _nft_description.toUpperCase()) || \"\";\n    if (name.includes(\"STELLAR\") || name.includes(\"VOYAGER\")) {\n        return \"STELLAR VOYAGER\";\n    } else if (name.includes(\"NEBULA\") || name.includes(\"HUNTER\")) {\n        return \"NEBULA HUNTER\";\n    } else if (name.includes(\"QUANTUM\") || name.includes(\"DESTROYER\")) {\n        return \"QUANTUM DESTROYER\";\n    }\n    // Default to STELLAR VOYAGER if can't determine\n    return \"STELLAR VOYAGER\";\n};\n// Generate mock game data for NFTs (in real app, this would come from game backend)\nconst generateGameData = (tokenId)=>{\n    const seed = parseInt(tokenId) || 1;\n    return {\n        level: Math.max(1, Math.floor(seed % 10) + 1),\n        experience: seed % 10 * 250 + Math.floor(seed / 10) * 100,\n        missions: Math.floor(seed % 50) + Math.floor(seed / 100) * 5,\n        earnings: parseFloat((seed % 100 / 1000 + seed % 10 / 100).toFixed(3))\n    };\n};\nclass AlchemyNFTService {\n    // Test different networks to find where NFTs are located\n    async testNetworksForNFTs(ownerAddress) {\n        const networks = [\n            {\n                name: \"Ethereum Mainnet\",\n                network: alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.ETH_MAINNET,\n                chainId: \"1\"\n            },\n            {\n                name: \"Ethereum Sepolia\",\n                network: alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.ETH_SEPOLIA,\n                chainId: \"11155111\"\n            },\n            {\n                name: \"Polygon Mainnet\",\n                network: alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.MATIC_MAINNET,\n                chainId: \"137\"\n            },\n            {\n                name: \"Polygon Mumbai\",\n                network: alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.N.MATIC_MUMBAI,\n                chainId: \"80001\"\n            }\n        ];\n        console.log(\"\\uD83D\\uDD0D Testing networks for NFTs...\");\n        for (const net of networks){\n            try {\n                var _response_ownedNfts;\n                console.log(\"\\n\\uD83C\\uDF10 Testing \".concat(net.name, \" (Chain ID: \").concat(net.chainId, \")...\"));\n                const testAlchemy = new alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.m({\n                    apiKey: \"mKSXhkHH4QGGKApSV9bmVUoFwuetHWWw\" || 0,\n                    network: net.network\n                });\n                const response = await testAlchemy.nft.getNftsForOwner(ownerAddress, {\n                    omitMetadata: false\n                });\n                console.log(\"\\uD83D\\uDCCA \".concat(net.name, \" results:\"), {\n                    totalCount: response.totalCount,\n                    ownedNftsCount: ((_response_ownedNfts = response.ownedNfts) === null || _response_ownedNfts === void 0 ? void 0 : _response_ownedNfts.length) || 0\n                });\n                if (response.ownedNfts && response.ownedNfts.length > 0) {\n                    console.log(\"\\uD83C\\uDFAF Found \".concat(response.ownedNfts.length, \" NFTs on \").concat(net.name, \"!\"));\n                    console.log(\"Sample NFTs:\", response.ownedNfts.slice(0, 3).map((nft)=>{\n                        var _nft_contract;\n                        return {\n                            tokenId: nft.tokenId,\n                            contract: (_nft_contract = nft.contract) === null || _nft_contract === void 0 ? void 0 : _nft_contract.address,\n                            title: nft.title || nft.name,\n                            tokenType: nft.tokenType\n                        };\n                    }));\n                }\n            } catch (error) {\n                console.log(\"❌ \".concat(net.name, \" failed:\"), error.message);\n            }\n        }\n    }\n    // Fetch NFTs for a specific owner\n    async getNFTsForOwner(ownerAddress, contractAddress) {\n        try {\n            var _nftsResponse_ownedNfts, _nftsResponse_ownedNfts1;\n            console.log(\"\\uD83D\\uDE80 Fetching NFTs for owner:\", ownerAddress);\n            console.log(\"\\uD83D\\uDD0D Contract filter:\", contractAddress || \"All contracts\");\n            console.log(\"\\uD83C\\uDF10 Current network:\", getAlchemyConfig().network);\n            console.log(\"\\uD83D\\uDD11 API Key (first 10 chars):\", getAlchemyConfig().apiKey.substring(0, 10) + \"...\");\n            // Try multiple approaches to fetch NFTs\n            const approaches = [\n                // Approach 1: With contract filter (if provided)\n                ...contractAddress ? [\n                    {\n                        contractAddresses: [\n                            contractAddress\n                        ],\n                        omitMetadata: false\n                    }\n                ] : [],\n                // Approach 2: Without contract filter (all NFTs)\n                {\n                    omitMetadata: false\n                },\n                // Approach 3: Minimal options\n                {}\n            ];\n            let nftsResponse = null;\n            let usedApproach = 0;\n            for(let i = 0; i < approaches.length; i++){\n                try {\n                    console.log(\"\\uD83D\\uDCE1 Trying approach \".concat(i + 1, \":\"), approaches[i]);\n                    nftsResponse = await alchemy.nft.getNftsForOwner(ownerAddress, approaches[i]);\n                    usedApproach = i + 1;\n                    console.log(\"✅ Approach \".concat(i + 1, \" successful!\"));\n                    break;\n                } catch (approachError) {\n                    console.log(\"❌ Approach \".concat(i + 1, \" failed:\"), approachError);\n                    continue;\n                }\n            }\n            if (!nftsResponse) {\n                throw new Error(\"All approaches failed\");\n            }\n            console.log(\"\\uD83D\\uDCCA Alchemy response (approach \" + usedApproach + \"):\", {\n                totalCount: nftsResponse.totalCount,\n                ownedNftsCount: ((_nftsResponse_ownedNfts = nftsResponse.ownedNfts) === null || _nftsResponse_ownedNfts === void 0 ? void 0 : _nftsResponse_ownedNfts.length) || 0,\n                pageKey: nftsResponse.pageKey,\n                validAt: nftsResponse.validAt\n            });\n            if (((_nftsResponse_ownedNfts1 = nftsResponse.ownedNfts) === null || _nftsResponse_ownedNfts1 === void 0 ? void 0 : _nftsResponse_ownedNfts1.length) > 0) {\n                var _nftsResponse_ownedNfts__contract;\n                console.log(\"\\uD83C\\uDFAF First NFT sample:\", {\n                    tokenId: nftsResponse.ownedNfts[0].tokenId,\n                    title: nftsResponse.ownedNfts[0].title,\n                    name: nftsResponse.ownedNfts[0].name,\n                    contract: (_nftsResponse_ownedNfts__contract = nftsResponse.ownedNfts[0].contract) === null || _nftsResponse_ownedNfts__contract === void 0 ? void 0 : _nftsResponse_ownedNfts__contract.address,\n                    tokenType: nftsResponse.ownedNfts[0].tokenType,\n                    description: nftsResponse.ownedNfts[0].description\n                });\n            }\n            const allNFTs = nftsResponse.ownedNfts || [];\n            console.log(\"\\uD83D\\uDCDD Processing\", allNFTs.length, \"NFTs...\");\n            // Process all NFTs (don't filter by title initially to see what we get)\n            const processedNFTs = allNFTs.map((nft, index)=>{\n                var _nft_contract, _nft_contract1, _nft_media_, _nft_media, _nft_media_1, _nft_media1, _nft_image;\n                console.log(\"\\uD83D\\uDD04 Processing NFT \".concat(index + 1, \":\"), {\n                    tokenId: nft.tokenId,\n                    title: nft.title,\n                    name: nft.name,\n                    contract: (_nft_contract = nft.contract) === null || _nft_contract === void 0 ? void 0 : _nft_contract.address,\n                    hasMetadata: !!nft.metadata\n                });\n                const shipType = mapNFTToShipType(nft);\n                const gameData = generateGameData(nft.tokenId);\n                return {\n                    tokenId: nft.tokenId,\n                    contractAddress: ((_nft_contract1 = nft.contract) === null || _nft_contract1 === void 0 ? void 0 : _nft_contract1.address) || \"\",\n                    shipType,\n                    name: nft.title || nft.name || \"Ship #\".concat(nft.tokenId),\n                    description: nft.description || SHIP_TYPES[shipType].description,\n                    image: ((_nft_media = nft.media) === null || _nft_media === void 0 ? void 0 : (_nft_media_ = _nft_media[0]) === null || _nft_media_ === void 0 ? void 0 : _nft_media_.gateway) || ((_nft_media1 = nft.media) === null || _nft_media1 === void 0 ? void 0 : (_nft_media_1 = _nft_media1[0]) === null || _nft_media_1 === void 0 ? void 0 : _nft_media_1.raw) || ((_nft_image = nft.image) === null || _nft_image === void 0 ? void 0 : _nft_image.originalUrl) || \"\",\n                    mintedAt: new Date().toISOString().split(\"T\")[0],\n                    ...gameData,\n                    metadata: nft.metadata || {}\n                };\n            });\n            console.log(\"✨ Final processed NFTs:\", processedNFTs.length);\n            console.log(\"\\uD83C\\uDFAE Processed NFTs details:\", processedNFTs.map((nft)=>({\n                    tokenId: nft.tokenId,\n                    name: nft.name,\n                    shipType: nft.shipType,\n                    contract: nft.contractAddress\n                })));\n            return processedNFTs;\n        } catch (error) {\n            console.error(\"\\uD83D\\uDCA5 Error fetching NFTs from Alchemy:\", error);\n            console.error(\"Error details:\", {\n                message: error.message,\n                stack: error.stack,\n                name: error.name\n            });\n            // Return empty array instead of throwing to prevent app crashes\n            return [];\n        }\n    }\n    // Fetch specific NFT details\n    async getNFTDetails(contractAddress, tokenId) {\n        try {\n            var _nft_image, _nft_image1, _nft_raw;\n            const nft = await alchemy.nft.getNftMetadata(contractAddress, tokenId);\n            if (!nft) return null;\n            const shipType = mapNFTToShipType(nft);\n            const gameData = generateGameData(tokenId);\n            return {\n                tokenId: nft.tokenId,\n                contractAddress: nft.contract.address,\n                shipType,\n                name: nft.name || \"Ship #\".concat(nft.tokenId),\n                description: nft.description || SHIP_TYPES[shipType].description,\n                image: ((_nft_image = nft.image) === null || _nft_image === void 0 ? void 0 : _nft_image.originalUrl) || ((_nft_image1 = nft.image) === null || _nft_image1 === void 0 ? void 0 : _nft_image1.cachedUrl) || \"\",\n                mintedAt: new Date().toISOString().split(\"T\")[0],\n                ...gameData,\n                metadata: ((_nft_raw = nft.raw) === null || _nft_raw === void 0 ? void 0 : _nft_raw.metadata) || {}\n            };\n        } catch (error) {\n            console.error(\"Error fetching NFT details from Alchemy:\", error);\n            return null;\n        }\n    }\n    // Get NFT collection info\n    async getCollectionInfo(contractAddress) {\n        try {\n            const metadata = await alchemy.nft.getContractMetadata(contractAddress);\n            return metadata;\n        } catch (error) {\n            console.error(\"Error fetching collection info:\", error);\n            return null;\n        }\n    }\n}\n// Export singleton instance\nconst alchemyNFTService = new AlchemyNFTService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/AlchemyService.tsx\n"));

/***/ })

});